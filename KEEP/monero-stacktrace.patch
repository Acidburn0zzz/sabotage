diff --git a/external/easylogging++/ea_config.h b/external/easylogging++/ea_config.h
index 4c74925d..8bc1b101 100644
--- a/external/easylogging++/ea_config.h
+++ b/external/easylogging++/ea_config.h
@@ -8,7 +8,8 @@
 #define ELPP_NO_DEBUG_MACROS
 
 #ifdef EASYLOGGING_CC
-#if !(!defined __GNUC__ || defined __MINGW32__ || defined __MINGW64__ || defined __ANDROID__)
+#if 0
 #define ELPP_FEATURE_CRASH_LOG
 #endif
+#undef ELPP_FEATURE_CRASH_LOG
 #endif
diff --git a/external/easylogging++/easylogging++.h b/external/easylogging++/easylogging++.h
index 3270bd60..9d06ad5b 100644
--- a/external/easylogging++/easylogging++.h
+++ b/external/easylogging++/easylogging++.h
@@ -200,7 +200,7 @@ ELPP_INTERNAL_DEBUGGING_OUT_INFO << ELPP_INTERNAL_DEBUGGING_MSG(internalInfoStre
 #  define ELPP_INTERNAL_INFO(lvl, msg)
 #endif  // (defined(ELPP_DEBUG_INFO))
 #if (defined(ELPP_FEATURE_ALL)) || (defined(ELPP_FEATURE_CRASH_LOG))
-#  if (ELPP_COMPILER_GCC && !ELPP_MINGW && !ELPP_OS_OPENBSD)
+#  if 0
 #    define ELPP_STACKTRACE 1
 #  else
 #    define ELPP_STACKTRACE 0
diff --git a/src/common/stack_trace.cpp b/src/common/stack_trace.cpp
index 9c2bf4b5..61f3a03e 100644
--- a/src/common/stack_trace.cpp
+++ b/src/common/stack_trace.cpp
@@ -110,58 +110,6 @@ void set_stack_trace_log(const std::string &log)
 
 void log_stack_trace(const char *msg)
 {
-#ifdef USE_UNWIND
-  unw_context_t ctx;
-  unw_cursor_t cur;
-  unw_word_t ip, off;
-  unsigned level;
-  char sym[512], *dsym;
-  int status;
-  const char *log = stack_trace_log.empty() ? NULL : stack_trace_log.c_str();
-#endif
-
-  if (msg)
-    ST_LOG(msg);
-  ST_LOG("Unwound call stack:");
-
-#ifdef USE_UNWIND
-  if (unw_getcontext(&ctx) < 0) {
-    ST_LOG("Failed to create unwind context");
-    return;
-  }
-  if (unw_init_local(&cur, &ctx) < 0) {
-    ST_LOG("Failed to find the first unwind frame");
-    return;
-  }
-  for (level = 1; level < 999; ++level) { // 999 for safety
-    int ret = unw_step(&cur);
-    if (ret < 0) {
-      ST_LOG("Failed to find the next frame");
-      return;
-    }
-    if (ret == 0)
-      break;
-    if (unw_get_reg(&cur, UNW_REG_IP, &ip) < 0) {
-      ST_LOG("  " << std::setw(4) << level);
-      continue;
-    }
-    if (unw_get_proc_name(&cur, sym, sizeof(sym), &off) < 0) {
-      ST_LOG("  " << std::setw(4) << level << std::setbase(16) << std::setw(20) << "0x" << ip);
-      continue;
-    }
-    dsym = abi::__cxa_demangle(sym, NULL, NULL, &status);
-    ST_LOG("  " << std::setw(4) << level << std::setbase(16) << std::setw(20) << "0x" << ip << " " << (!status && dsym ? dsym : sym) << " + " << "0x" << off);
-    free(dsym);
-  }
-#else
-  std::stringstream ss;
-  ss << el::base::debug::StackTrace();
-  std::vector<std::string> lines;
-  std::string s = ss.str();
-  boost::split(lines, s, boost::is_any_of("\n"));
-  for (const auto &line: lines)
-    ST_LOG(line);
-#endif
 }
 
 }  // namespace tools
