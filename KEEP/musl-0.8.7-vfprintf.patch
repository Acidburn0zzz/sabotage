From 22bac7f95b09b97c1f28e84cedc4a8bd606dfc4e Mon Sep 17 00:00:00 2001
From: Rich Felker <dalias@aerifal.cx>
Date: Tue, 17 Apr 2012 10:58:02 -0400
Subject: [PATCH] fix buffer overflow in vfprintf on long writes to unbuffered files

vfprintf temporarily swaps in a local buffer (for the duration of the
operation) when the target stream is unbuffered; this both simplifies
the implementation of functions like dprintf (they don't need their
own buffers) and eliminates the pathologically bad performance of
writing the formatted output with one or more write syscalls per
formatting field.

in cases like dprintf where we are dealing with a virgin FILE
structure, everything worked correctly. however for long-lived files
(like stderr), it's possible that the buffer bounds were already set
for the internal zero-size buffer. on the next write, __stdio_write
would pick up and use the new buffer provided by vfprintf, but the
bound (wend) field was still pointing at the internal zero-size
buffer's end. this in turn allowed unbounded writes to the temporary
buffer.
---
 src/stdio/__stdio_write.c |    1 +
 src/stdio/vfprintf.c      |    3 ++-
 2 files changed, 3 insertions(+), 1 deletions(-)

diff --git a/src/stdio/__stdio_write.c b/src/stdio/__stdio_write.c
index dd97cf6..da45673 100644
--- a/src/stdio/__stdio_write.c
+++ b/src/stdio/__stdio_write.c
@@ -22,6 +22,7 @@ size_t __stdio_write(FILE *f, const unsigned char *buf, size_t len)
 		cnt = syscall_cp(SYS_writev, f->fd, iov, iovcnt);
 		pthread_cleanup_pop(0);
 		if (cnt == rem) {
+			f->wend = f->buf + f->buf_size;
 			f->wpos = f->wbase = f->buf;
 			return len;
 		}
diff --git a/src/stdio/vfprintf.c b/src/stdio/vfprintf.c
index 928c8c1..91c6b93 100644
--- a/src/stdio/vfprintf.c
+++ b/src/stdio/vfprintf.c
@@ -650,8 +650,9 @@ int vfprintf(FILE *f, const char *fmt, va_list ap)
 	FLOCK(f);
 	if (!f->buf_size) {
 		saved_buf = f->buf;
-		f->buf = internal_buf;
+		f->wpos = f->wbase = f->buf = internal_buf;
 		f->buf_size = sizeof internal_buf;
+		f->wend = internal_buf + sizeof internal_buf;
 	}
 	ret = printf_core(f, fmt, &ap2, nl_arg, nl_type);
 	if (saved_buf) {
-- 
1.7.3.4

