partially taken from 8a81562af30435f82255830489dca691031a5408
http://qt.gitorious.org/qt/qt/commit/8a81562af30435f82255830489dca691031a5408

--- qt-x11-opensource-src-4.3.4.org/src/gui/image/qpnghandler.cpp
+++ qt-x11-opensource-src-4.3.4/src/gui/image/qpnghandler.cpp
@@ -248,6 +248,47 @@
 }
 #endif
 
+static int getNumPalette(png_structp png, png_infop inf) {
+	png_colorp pal;
+	int ret;
+	png_get_PLTE(png, inf, &pal, &ret);
+	return ret;
+}
+
+static png_colorp getPalette(png_structp png, png_infop inf) {
+        png_colorp pal;
+        int ret;
+        png_get_PLTE(png, inf, &pal, &ret);
+	return pal;
+}
+
+static png_color_16p getTransColors(png_structp png, png_infop inf) {
+	png_color_16p transcol;
+	int num_trans;
+	png_bytep trans;
+	png_get_tRNS(png, inf, &trans, &num_trans, &transcol);
+	return transcol;
+}
+static png_bytep getTransAlpha(png_structp png, png_infop inf) {
+	png_color_16p transcol;
+	int num_trans;
+	png_bytep trans;
+	png_get_tRNS(png, inf, &trans, &num_trans, &transcol);
+	return trans;
+}
+static int getTransColorGray(png_structp png, png_infop inf) {
+	png_color_16p transcol = getTransColors(png, inf);
+	return transcol->gray;
+}
+
+static int getTransColorNum(png_structp png, png_infop inf) {
+	png_color_16p transcol;
+	int num_trans;
+	png_bytep trans;
+	png_get_tRNS(png, inf, &trans, &num_trans, &transcol);
+	return num_trans;
+}
+
 static
 void setup_qt(QImage& image, png_structp png_ptr, png_infop info_ptr, float screen_gamma=0.0)
 {
@@ -265,7 +306,7 @@
 
     if (color_type == PNG_COLOR_TYPE_GRAY) {
         // Black & White or 8-bit grayscale
-        if (bit_depth == 1 && info_ptr->channels == 1) {
+        if (bit_depth == 1 && png_get_channels(png_ptr, info_ptr) == 1) {
             png_set_invert_mono(png_ptr);
             png_read_update_info(png_ptr, info_ptr);
             if (image.size() != QSize(width, height) || image.format() != QImage::Format_Mono) {
@@ -307,7 +348,8 @@
                 image.setColor(i, qRgba(c,c,c,0xff));
             }
             if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) {
-                const int g = info_ptr->trans_values.gray;
+                //const int g = info_ptr->trans_values.gray;
+		const int g = getTransColorGray(png_ptr, info_ptr);
                 if (g < ncols) {
                     image.setColor(g, 0);
                 }
@@ -315,7 +357,7 @@
         }
     } else if (color_type == PNG_COLOR_TYPE_PALETTE
                && png_get_valid(png_ptr, info_ptr, PNG_INFO_PLTE)
-               && info_ptr->num_palette <= 256)
+               && getNumPalette(png_ptr, info_ptr) <= 256)
     {
         // 1-bit and 8-bit color
         if (bit_depth != 1)
@@ -328,25 +370,31 @@
             if (image.isNull())
                 return;
         }
-        image.setNumColors(info_ptr->num_palette);
+        image.setNumColors(getNumPalette(png_ptr, info_ptr));
         int i = 0;
         if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) {
-            while (i < info_ptr->num_trans) {
+		int num_trans = getTransColorNum(png_ptr, info_ptr);
+		png_colorp palette = getPalette(png_ptr, info_ptr);
+		png_color_16p trans = getTransColors(png_ptr, info_ptr);
+		png_bytep trans_alpha = getTransAlpha(png_ptr, info_ptr);
+            while (i < num_trans) {
                 image.setColor(i, qRgba(
-                    info_ptr->palette[i].red,
-                    info_ptr->palette[i].green,
-                    info_ptr->palette[i].blue,
-                    info_ptr->trans[i]
+                    palette[i].red,
+                    palette[i].green,
+                    palette[i].blue,
+                    trans_alpha[i]
                    )
                );
                 i++;
             }
         }
-        while (i < info_ptr->num_palette) {
+	int num_pal = getNumPalette(png_ptr, info_ptr);
+	png_colorp palette = getPalette(png_ptr, info_ptr);
+        while (i < num_pal) {
             image.setColor(i, qRgba(
-                info_ptr->palette[i].red,
-                info_ptr->palette[i].green,
-                info_ptr->palette[i].blue,
+                palette[i].red,
+                palette[i].green,
+                palette[i].blue,
                 0xff
                )
            );
@@ -768,16 +816,8 @@
         png_set_compression_level(png_ptr, quality);
     }
 
-    if (gamma != 0.0) {
-        png_set_gAMA(png_ptr, info_ptr, 1.0/gamma);
-    }
-
     png_set_write_fn(png_ptr, (void*)this, qpiw_write_fn, qpiw_flush_fn);
 
-    info_ptr->channels =
-        (image.depth() == 32)
-        ? (image.format() == QImage::Format_RGB32 ? 3 : 4)
-        : 1;
 
     png_set_IHDR(png_ptr, info_ptr, image.width(), image.height(),
         image.depth() == 1 ? 1 : 8 /* per channel */,
@@ -787,47 +827,45 @@
                 : PNG_COLOR_TYPE_RGB_ALPHA
             : PNG_COLOR_TYPE_PALETTE, 0, 0, 0);
 
+    if (gamma != 0.0) {
+        png_set_gAMA(png_ptr, info_ptr, 1.0/gamma);
+    }
 
     //png_set_sBIT(png_ptr, info_ptr, 8);
-    info_ptr->sig_bit.red = 8;
-    info_ptr->sig_bit.green = 8;
-    info_ptr->sig_bit.blue = 8;
+	png_color_8 sig_bit;
+    sig_bit.red = 8;
+    sig_bit.green = 8;
+    sig_bit.blue = 8;
+    sig_bit.alpha = image.hasAlphaChannel() ? 8 : 0;
+    png_set_sBIT(png_ptr, info_ptr, &sig_bit);
 
     if (image.format() == QImage::Format_MonoLSB)
        png_set_packswap(png_ptr);
 
-    png_colorp palette = 0;
-    png_bytep copy_trans = 0;
     if (image.numColors()) {
         // Paletted
         int num_palette = image.numColors();
-        palette = new png_color[num_palette];
-        png_set_PLTE(png_ptr, info_ptr, palette, num_palette);
-        int* trans = new int[num_palette];
+    png_color palette[num_palette];
+    png_byte trans[num_palette];
+
         int num_trans = 0;
         for (int i=0; i<num_palette; i++) {
             QRgb rgb=image.color(i);
-            info_ptr->palette[i].red = qRed(rgb);
-            info_ptr->palette[i].green = qGreen(rgb);
-            info_ptr->palette[i].blue = qBlue(rgb);
+            palette[i].red = qRed(rgb);
+            palette[i].green = qGreen(rgb);
+            palette[i].blue = qBlue(rgb);
             trans[i] = rgb >> 24;
             if (trans[i] < 255) {
                 num_trans = i+1;
             }
         }
+	png_set_PLTE(png_ptr, info_ptr, palette, num_palette);
+
         if (num_trans) {
-            copy_trans = new png_byte[num_trans];
-            for (int i=0; i<num_trans; i++)
-                copy_trans[i] = trans[i];
-            png_set_tRNS(png_ptr, info_ptr, copy_trans, num_trans, 0);
+            png_set_tRNS(png_ptr, info_ptr, trans, num_trans, 0);
         }
-        delete [] trans;
     }
 
-    if (image.format() != QImage::Format_RGB32) {
-        info_ptr->sig_bit.alpha = 8;
-    }
-
     // Swap ARGB to RGBA (normal PNG format) before saving on
     // BigEndian machines
     if (QSysInfo::ByteOrder == QSysInfo::BigEndian) {
@@ -901,11 +939,6 @@
     png_write_end(png_ptr, info_ptr);
     frames_written++;
 
-    if (palette)
-        delete [] palette;
-    if (copy_trans)
-        delete [] copy_trans;
-
     png_destroy_write_struct(&png_ptr, &info_ptr);
 
     return true;
@@ -990,7 +1023,8 @@
     else if (option == Description)
         return d->description;
     else if (option == Size)
-        return QSize(d->info_ptr->width, d->info_ptr->height);
+	return QSize(png_get_image_width(d->png_ptr, d->info_ptr),
+		     png_get_image_height(d->png_ptr, d->info_ptr));
     return 0;
 }
 
