diff ru SDL2-2.0.16.org/src/joystick/linux/SDL_sysjoystick.c SDL2-2.0.16/src/joystick/linux/SDL_sysjoystick.c
--- SDL2-2.0.16.org/src/joystick/linux/SDL_sysjoystick.c	2021-09-02 21:23:15.464255406 +0000
+++ SDL2-2.0.16/src/joystick/linux/SDL_sysjoystick.c	2021-09-02 21:32:51.146310856 +0000
@@ -560,8 +560,10 @@
 
     while (remain > 0) {
         if (buf.event.len > 0) {
-            if (StrHasPrefix(buf.event.name, "event") &&
-                StrIsInteger(buf.event.name + strlen ("event"))) {
+            if ((StrHasPrefix(buf.event.name, "event") &&
+                 StrIsInteger(buf.event.name + strlen ("event"))) ||
+                (StrHasPrefix(buf.event.name, "js") &&
+                 StrIsInteger(buf.event.name + strlen ("js")))) {
                 char path[PATH_MAX];
 
                 SDL_snprintf(path, SDL_arraysize(path), "/dev/input/%s", buf.event.name);
@@ -592,7 +594,8 @@
 static int
 filter_entries(const struct dirent *entry)
 {
-    return (SDL_strlen(entry->d_name) > 5 && SDL_strncmp(entry->d_name, "event", 5) == 0);
+    return ((SDL_strncmp(entry->d_name, "event", 5) == 0 && entry->d_name[5]) ||
+            (SDL_strncmp(entry->d_name, "js", 2) == 0 && entry->d_name[2]));
 }
 static int
 sort_entries(const struct dirent **a, const struct dirent **b)
@@ -635,6 +638,7 @@
 static void
 LINUX_JoystickDetect(void)
 {
+    int fallback_used = 0;
 #if SDL_USE_LIBUDEV
     if (enumeration_method == ENUMERATION_LIBUDEV) {
         SDL_UDEV_Poll();
@@ -649,8 +653,12 @@
 #endif
     {
         LINUX_FallbackJoystickDetect();
+        fallback_used = 1;
     }
 
+    if (numjoysticks == 0 && !fallback_used)
+        LINUX_FallbackJoystickDetect();
+
     HandlePendingRemovals();
 
     SDL_UpdateSteamControllers();
@@ -993,7 +1001,8 @@
                                      &joystick->naxes,
                                      &joystick->nhats);
     } else {
-        const int fd = open(item->path, O_RDWR, 0);
+        int fd = open(item->path, O_RDONLY, 0);
+        if (fd < 0) fd = open(item->path, O_RDONLY, 0);
         if (fd < 0) {
             return SDL_SetError("Unable to open %s", item->path);
         }
