[main]
filesize=2186738
sha512=089b67cd920f332daf910711739b1e55ba4c76cfa2122dfe5464432e0d76d3af8327837ebc3cc9954deef3e8f766d16a1928aecb2c169fe3de5a722eea7ea3dd

[deps]
kernel-headers
patch
stage0_musl

[mirrors]
http://www.busybox.net/downloads/busybox-1.20.2.tar.bz2

[build]

[ "$STAGE" = "U" ] && exit 0
if [ "$STAGE" = "0" ] ; then
	CC="$butch_root_dir"/bin/musl-gcc
	PATCH="$butch_root_dir"/bin/patch
else
	PATCH=patch
fi

dopatch() {
	echo "applying patch $1"
	"$PATCH" -p1 < "$1"
}

cp "$K"/busybox.stage1.config .config
dopatch "$K"/busybox.patch || exit 1
dopatch "$K"/busybox-blowfish.patch || exit 1
dopatch "$K"/busybox-unzip.patch || exit 1
dopatch "$K"/busybox-xz-bugfix1.patch || exit 1
dopatch "$K"/busybox-xz-bugfix2.patch || exit 1
dopatch "$K"/busybox-xz-bugfix3.patch || exit 1
dopatch "$K"/busybox-man.patch || exit 1
dopatch "$K"/busybox-sed.patch || exit 1


#__inline seems to get activated when -std=gnu99 is used, causing havoc 
sed -i 's,__inline,,' ./scripts/kconfig/zconf.hash.c_shipped

if [ ! -z "$DEBUGBUILD" ] ; then
	debugcflags="-O0 -g"
	sed -i 's/# CONFIG_DEBUG is not set/CONFIG_DEBUG=y/' .config
	sed -i 's/# CONFIG_DEBUG_PESSIMIZE is not set/CONFIG_DEBUG_PESSIMIZE=y/' .config
	sed -i 's/CONFIG_NO_DEBUG_LIB=y/# CONFIG_NO_DEBUG_LIB is not set/' .config
fi

# alternative:
# make KBUILD_VERBOSE=1 CC="$CC" HOSTCC="$HOSTCC" \
# HOSTCFLAGS=-D_GNU_SOURCE -j$MAKE_THREADS || exit 1

make V=1 LDFLAGS=-static HOSTLDFLAGS=-static \
CFLAGS_busybox="$debugcflags -Wl,-z,muldefs -Werror-implicit-function-declaration" \
HOSTCC="$CC -static" CC="$CC -static" HOSTCFLAGS=-D_GNU_SOURCE  -j$MAKE_THREADS || exit 1
echo busybox build complete

# building standalone suid applets
make allnoconfig
sed -i 's/# CONFIG_FEATURE_INDIVIDUAL is not set/CONFIG_FEATURE_INDIVIDUAL=y/' .config
# without LFS and the whole LARGEFILE64 glibc nonsense, busybox assumes that off_t is long
sed -i 's/# CONFIG_LFS is not set/CONFIG_LFS=y/' .config
cp .config .config.clean

build_single() {
	local dir="$1"
	local applet="$2"
	local bb_cflags="-D_GNU_SOURCE -std=gnu99 -I../include -I../libbb -DNDEBUG -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE \
                         -D_FILE_OFFSET_BITS=64 -DBB_VER=\"1.20.2\" -DBB_BT=AUTOCONF_TIMESTAMP -include ../include/autoconf.h"
	make include/autoconf.h
	$CC ./applets/applet_tables.c || exit 1
	./a.out include/applet_tables.h
	cd "$dir"
	$CC -static $bb_cflags $optcflags $tus -o ../"$applet" $optldflags || exit 1
	cd ..
}

# 1) ping
sed -i 's/# CONFIG_PING is not set/CONFIG_PING=y/' .config
sed -i 's/# CONFIG_FEATURE_FANCY_PING is not set/CONFIG_FEATURE_FANCY_PING=y/' .config

tus="../libbb/xfunc_die.c ../libbb/verror_msg.c ../libbb/bb_strtonum.c ../libbb/read.c ../libbb/xconnect.c ../libbb/copyfd.c \
../libbb/default_error_retval.c ../libbb/appletlib.c ../libbb/messages.c ../libbb/xfuncs.c ../libbb/full_write.c \
../libbb/inet_cksum.c ping.c ../libbb/create_icmp_socket.c ../libbb/perror_msg.c ../libbb/xfuncs_printf.c ../libbb/safe_write.c \
../libbb/time.c ../libbb/safe_strncpy.c ../libbb/getopt32.c ../libbb/xatonum.c ../libbb/llist.c"

build_single networking ping

# 2) su
cp .config.clean .config
sed -i 's/# CONFIG_SU is not set/CONFIG_SU=y/' .config
sed -i 's/# CONFIG_USE_BB_PWD_GRP is not set/CONFIG_USE_BB_PWD_GRP=y/' .config

tus="../libbb/xfunc_die.c ../libbb/verror_msg.c ../libbb/bb_strtonum.c ../libbb/read.c ../libbb/copyfd.c ../libbb/xatonum.c \
../libbb/default_error_retval.c ../libbb/pw_encrypt.c ../libbb/appletlib.c ../libbb/run_shell.c ../libbb/last_char_is.c \
../libbb/messages.c ../libbb/llist.c ../libbb/setup_environment.c ../libbb/xfuncs.c ../libbb/full_write.c \
../libbb/get_last_path_component.c ../libbb/getopt32.c ../libbb/xfuncs_printf.c ../libbb/correct_password.c \
../libbb/perror_msg.c ../libbb/change_identity.c ../libbb/bb_pwd.c ../libbb/safe_write.c ../libbb/time.c \
../libbb/signals.c ../libbb/bb_askpass.c ../libpwdgrp/pwd_grp.c ../libbb/wfopen.c ../libbb/xrealloc_vector.c su.c"

build_single loginutils su

# done, continue with "make install" equivalent

dest=$butch_install_dir$butch_prefix
mkdir -p "$dest"/bin

cp su "$dest"/bin/
cp ping "$dest"/bin/

busybox_bin=busybox
[ "$DEBUGBUILD" = "1" ] && busybox_bin=busybox_unstripped
# on armv4tl and mips, the stripped busybox binary is buggy - argv parsing is broken somehow:
# this manifests when trying to use enter-chroot script which fails.
[ "$A" = "arm" ] || [ "$A" = "mips" ] && busybox_bin=busybox_unstripped

echo cp "$busybox_bin" "$dest"/bin/busybox
cp "$busybox_bin" "$dest"/bin/busybox || exit 1

echo check if busybox works:
"$dest"/bin/busybox --list >/dev/null|| exit 1

trylink() {
	printf "trying to link busybox to %s ... " "$1"
	if ! ln -sf busybox "$1" ; then
		echo FAIL
		exit 1
	else
		echo OK
	fi
}

for f in $("$dest"/bin/busybox --list); do
	#echo ln -sf busybox "$dest"/bin/"$f"
	[ ! -f "$butch_root_dir/bin/$f" ] && \
	  trylink "$dest"/bin/"$f"
done

echo symlinks done.
